@page "/customers"
@using FuelStation.Blazor.Shared;
@using FuelStation.Blazor.Shared.ViewModels;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
<h3>Customer List</h3>

@if (isLoading) {
    <p>Loading ...</p>
}
else {
    <button class="btn btn-primary"@onclick="AddNewCustomer">New Customer</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Card Number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList) {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditCustomer(customer)">Edit</button>
                        <button class="btn btn-warning">Details</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer)">Delete</button>
                       
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    
    private List<CustomerListViewModel> customerList = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        customerList = await httpClient.GetFromJsonAsync<List<CustomerListViewModel>>("customer");
        
    }
    private async Task DeleteCustomer(CustomerListViewModel customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Item. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"customer/{customer.ID}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }
    private async Task AddNewCustomer() {
        navigationManager.NavigateTo("/customers/edit");
    }

    private async Task EditCustomer(CustomerListViewModel customer) {
        navigationManager.NavigateTo($"/customers/edit/{customer.ID}");

    }


}
