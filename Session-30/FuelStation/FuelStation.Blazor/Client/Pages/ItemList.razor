@page "/items"
@using FuelStation.Blazor.Shared.Services;
@using FuelStation.Blazor.Shared.ViewModels;
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject LoginStatus LoginStatus
@inject AuthorizationHandler AuthorizationHandler

@if (IsAuthorized())
{
<h3>Item List</h3>


 @if (isLoading)
    {
        <div class="lds-roller"></div>
    }
    else {
     <button class="btn btn-primary" @onclick="AddNewItem">New Item</button>

            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Description</th>
                        <th>Type</th>
                        <th>Price</th>
                        <th>Cost</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
            @foreach (var item in itemList) {
                            <tr>
                                <td>@item.Code</td>
                                <td>@item.Description</td>
                                <td>@item.ItemType</td>
                                <td>@item.Price</td>
                                <td>@item.Cost</td>
                                <td>
                                    <button class="btn btn-primary" @onclick="() => EditItem(item)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                                </td>
                            </tr>
            }
                </tbody>
            </table>
    }           }
else {
     <FuelStation.Blazor.Client.Components.Unauthorized />
}

@code {
    private bool isLoading = true;
    private List<ItemListViewModel> itemList = new();

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        itemList = await httpClient.GetFromJsonAsync<List<ItemListViewModel>>("item");
    }

    private async Task EditItem(ItemListViewModel item) {
        navigationManager.NavigateTo($"/Items/Edit/{item.ID}");

    }

    private async Task AddNewItem() {
        navigationManager.NavigateTo("/items/edit");
    }

    private async Task DeleteItem(ItemListViewModel item) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Customer. Are you sure?");
        if(confirm){
        var response = await httpClient.DeleteAsync($"item/{item.ID}");
            if ((int)response.StatusCode != 200) { await jsRuntime.InvokeVoidAsync("alert", "Error At Deleting Item.\nItem is tied to a List of Transactions."); }
        }
        
        await LoadItemsFromServer();
    }
    private bool IsAuthorized() {
        return AuthorizationHandler.HasAccessToItems(LoginStatus);
    }
}
