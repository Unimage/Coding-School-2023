@page "/employees"
@using FuelStation.Blazor.Shared.Services;
@using FuelStation.Blazor.Shared.ViewModels;
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject LoginStatus LoginStatus
@inject AuthorizationHandler AuthorizationHandler
<h3>Employee List</h3>
@if (IsAuthorized())
{
    @if (isLoading)
    {
        <div class="lds-hourglass"></div>
    }
    else
    {
        <button class="btn btn-primary" @onclick="AddNewEmployee">New Employee</button>
        <button class="btn btn-info" @onclick="ToggleTerminatedEmployees">
            @if (showTerminatedEmployees)
            {
                <span>Hide Terminated Employees</span>
            }
            else

            {
                <span>Show Terminated Emplyoees</span>
            }
        </button>


        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>SurName</th>
                    <th>Employee Type</th>
                    <th>Hire Date</th>
                    <th>Salary per month</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in activeEmployeeList)
                {
                    <tr>
                        <td>@employee.Name</td>
                        <td>@employee.Surname</td>
                        <td>@employee.EmployeeType</td>
                        <td>@employee.HireDateStart</td>
                        <td>@employee.SallaryPerMonth</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditEmployee(employee)">Edit</button>
                            <button class="btn btn-secondary" @onclick="() => EmployeeDetails(employee)">Details</button>
                            <button class="btn btn-warning" @onclick="() => TerminateEmployee(employee)">Terminate</button>
                            <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (showTerminatedEmployees)
        {
            <table class="table table-striped table-hover" style="margin-top 5px">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>SurName</th>
                        <th>Employee Type</th>
                        <th>Hire Date</th>
                        <td>Termination Date</td>
                        <th>Salary per month</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in terminatedEmployeeList)
                    {
                        <tr>
                            <td>@employee.Name</td>
                            <td>@employee.Surname</td>
                            <td>@employee.EmployeeType</td>
                            <td>@employee.HireDateStart</td>
                            <td>@employee.HireDateEnd</td>
                            <td>@employee.SallaryPerMonth</td>
                            <td>
                                <button class="btn btn-warning" @onclick="() => Rehire(employee)">Rehire</button>
                                <button class="btn btn-secondary" @onclick="() => EmployeeDetails(employee)">Details</button>
                                <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    }

}
else
{
    <FuelStation.Blazor.Client.Components.Unauthorized />
}


@code {
    private bool isLoading = true;
    private bool showTerminatedEmployees = false;
    private List<EmployeeListViewModel> employeeList = new();
    private List<EmployeeListViewModel> activeEmployeeList = new();
    private List<EmployeeListViewModel> terminatedEmployeeList = new();

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListViewModel>>("employee");
        SetUpActive(employeeList);
        SetUpTerminated(employeeList);

    }
    private async Task EditEmployee(EmployeeListViewModel employee) {
        navigationManager.NavigateTo($"/employees/Edit/{employee.ID}");
    }

    private async Task AddNewEmployee() {
        navigationManager.NavigateTo("/employees/edit");
    }

    private async Task DeleteEmployee(EmployeeListViewModel employee) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Customer. Are you sure?");
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"employee/{employee.ID}");
            if ((int)response.StatusCode == 409) { await jsRuntime.InvokeVoidAsync("alert", "Cant Rehire The Employee. Check Roster limits"); }
        }
        await LoadItemsFromServer();
    }

    public void SetUpActive(List<EmployeeListViewModel> employeeList) {
        activeEmployeeList = employeeList.Where(employee => employee.HireDateEnd is null).ToList() ?? new List<EmployeeListViewModel>();
    }
    public void SetUpTerminated(List<EmployeeListViewModel> employeeList) {
        terminatedEmployeeList = employeeList.Where(employee => employee.HireDateEnd is not null).ToList();
    }
    private async Task TerminateEmployee(EmployeeListViewModel employee) {
        var response = await httpClient.PutAsJsonAsync("employee/terminate", employee);
        if ((int)response.StatusCode == 409) { await jsRuntime.InvokeVoidAsync("alert", "Cant Terminate The Employee. Check Roster limits"); }
        await LoadItemsFromServer();
    }
    private async Task ToggleTerminatedEmployees() {
        showTerminatedEmployees = (!showTerminatedEmployees);
        await LoadItemsFromServer();
    }
    private async Task Rehire(EmployeeListViewModel employee) {
        var response = await httpClient.PutAsJsonAsync("employee/rehire", employee);
        if ((int)response.StatusCode == 409) { await jsRuntime.InvokeVoidAsync("alert", "Cant Rehire The Employee. Check Roster limits"); }
        await LoadItemsFromServer();
    }
    private async Task EmployeeDetails(EmployeeListViewModel employee) {
        navigationManager.NavigateTo($"/employees/details/{employee.ID}");

    }
    private bool IsAuthorized() {
        return AuthorizationHandler.HasAccessToCustomers(LoginStatus);
    }

}
