@page "/transactionlist/edit/{Id:int?}"
@using Session_27.Model;
@using Session_27.Shared;
@using System.Net.Http.Json;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
<h3>Transaction Edit</h3>
@if (transactionEdit == null) {
    <p>Loading ...</p>
}
else {
    <div class="row mt-2">
        <div class="col-md-6">
            <label class="form-label">Customer</label>
            <select class="form-control" @bind="transactionEdit.CustomerId">
                @foreach (var customer in Customers) {
                    <option value="@customer.Id">@customer.FullName</option>
                }
            </select>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <label class="form-label">Manager</label>
            <select class="form-control" @bind="transactionEdit.ManagerId">
                @foreach (var manager in Managers) {
                    <option value="@manager.Id">@manager.FullName</option>
                }
            </select>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Car</label>
                <select class="form-control" @bind="transactionEdit.CarId">
                    @foreach (var car in Cars) {
                        <option value="@car.Id">@car.BrandModelNum</option>
                    }
                </select>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Total Price</label>
                <input class="form-control" @bind="@transactionEdit.TotalPrice" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <button class="btn btn-success" @onclick="OnSave">Save Changes</button>
                <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
            </div>
        </div>
        <h3>Transaction Lines</h3>
        <button class="btn btn-success">Add Line</button>
        <div id="transactionLinesContainer" class="container-fluid">
            @foreach (var transactionLine in transactionEdit.TransactionLines) {
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Service Task</label>
                        <select class="form-control" @bind="@transactionLine.ServiceTaskId">
                            @foreach (var task in ServiceTasks) {
                                <option value="@task.Id">@task.Code - @task.Description</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Assigned Engineer</label>
                        <select class="form-control" @bind="@transactionLine.EngineerId">
                            @foreach (var engineer in Engineers) {
                                <option value="@engineer.Id">@engineer.Name - @engineer.Surname</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Price</label>
                        <input class="form-control" @bind="@transactionLine.Price" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Total Price</label>
                        <input class="form-control" @bind="@transactionEdit.TotalPrice" />
                    </div>
                    <input class="form-control" @bind="@transactionLine.TransactionId" hidden />
                    <div class="col-md-1">
                        <button class="btn btn-danger">Delete</button>
                    </div>
                </div>
            }

        </div>
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }
    public TransactionEditDto transactionEdit { get; set; }
    public List<CarListDto> Cars;
    public List<ManagerListDto> Managers;
    public List<CustomerListDto> Customers;
    public List<ServiceTaskListDto> ServiceTasks;
    public List<EngineerListDto> Engineers;
    bool isLoading = true;


    protected override async Task OnInitializedAsync() {
        Cars = await httpClient.GetFromJsonAsync<List<CarListDto>>("car");
        Customers = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
        Managers = await httpClient.GetFromJsonAsync<List<ManagerListDto>>("manager");
        ServiceTasks = await httpClient.GetFromJsonAsync<List<ServiceTaskListDto>>("servicetask");
        Engineers = await httpClient.GetFromJsonAsync<List<EngineerListDto>>("engineer");
        if (Id == null) {
            transactionEdit = new();
        }
        else {
            transactionEdit = await httpClient.GetFromJsonAsync<TransactionEditDto>($"transaction/{Id}");
        }
    }
    private void OnCancel() {
        navigationManager.NavigateTo("transactionlist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("transaction", transactionEdit);
        }
        else {
            response = await httpClient.PutAsJsonAsync("transaction", transactionEdit);
        }
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("transactionlist");
    }

}
