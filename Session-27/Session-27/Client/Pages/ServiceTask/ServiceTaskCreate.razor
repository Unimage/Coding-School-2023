@page "/servicetasklist/create"
@using Session_27.Model;
@using Session_27.Shared;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Create Task</h3>

@if (ServiceTask == null)
{
    <p>Loading ...</p>
}
else
{
    <EditForm Model="ServiceTask" OnValidSubmit="OnCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Code</label>
            <input class="form-check" type="text" @bind="@ServiceTask.Code" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label class="form-label">Description</label>
            <input class="form-check" type="text" @bind="@ServiceTask.Description" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label class="form-label">Hours</label>
            <InputNumber class="form-check" type="text" @bind-Value="@ServiceTask.Hours" />
            <ValidationMessage For="@(() => ServiceTask.Hours)" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" type="submit">Create</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>
</EditForm>
}



@code {
    
    ServiceTaskCreateDto ServiceTask { get; set; } = new();
    bool isLoading = true;

    private void OnCancel()
    {
        navigationManager.NavigateTo("servicetasklist");
    }
    private async Task OnCreate()
    {
        HttpResponseMessage? response;
        response = await httpClient.PostAsJsonAsync("servicetask", ServiceTask);
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("servicetasklist");
    }



}
